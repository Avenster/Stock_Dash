<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
    <link rel="stylesheet" href="index.css">
    <script type="text/javascript" src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
    
</head>

<body>

    <nav class="navbar">
        <ul>
            <li>GlobalVIZ</li>
            <li>Dashboard</li>
        </ul>
    </nav>

    <div class="main-section">
        <div class="main2">
            <div class="left">
                <div class="title">
                    <div class="title1">
                        <div class="subt">
                            <span>500</span>
                            <div>
                                <h2>S&P500</h2>
                                <p>
                                    <%=bitcoinPrice%>
                                </p>
                            </div>
                            <div class="buttons">
                                <button id="candlestick-btn">Candlestick</button>
                                <button id="line-btn">Line</button>
                                <a href="correlation" id="line-btn-1"><button> Next Day Analysis</button></a>
                            </div>
                        </div>

                        <div class="sum">
                            <p>Previous Closing Price</p>
                            <p>
                                <%=bitcoinPrice%>
                            </p>
                        </div>
                    </div>

                </div>
                <div class="graph">
                    <div id="container"></div>
                </div>
                <div class="info">
                    <% for (let i=0; i < uniquePrices.length; i++) { %>
                        <div>
                            <div>
                                <img src="greenarrow.svg" alt="" id="img<%= i %>">
                            </div>
                            <div>
                                <h7>
                                    <%= stockNames[i] %>
                                </h7>
                                <p>
                                    <%= uniquePrices[i] %>
                                </p>
                            </div>
                            <div class="change" id="div<%= i %>">
                                <p id="perc<%= i %>">
                                    <%= uniquePerct[i] %>
                                </p>
                            </div>
                        </div>
                        <% } %>
                </div>



            </div>
            <div class="right">
                <h1>Market News</h1>
                <div class="headline">
                    <!-- id="news-container"-->
                    <div id="news-container">
                        <!-- <div id="news-item">
                                <h1>Dyuti is Binni(chomu)</h1>
                                <img src="" alt="">
                            </div> -->
                    </div>

                </div>
            </div>
        </div>

    </div>
    <script>
            document.addEventListener("DOMContentLoaded", function () {
            fetch('./Json files/S&P500_Close_data.json')
                .then(response => response.json())
                .then(data => {
                    createCandlestickChart(data);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        });
        document.addEventListener("DOMContentLoaded", function () {
            fetch('http://127.0.0.1:5000/api/news')
                .then(response => response.json())
                .then(data => {
                    data.JtKRv.forEach((item, index) => {
                        const newsContainer = document.createElement('div');
                        newsContainer.classList.add('news-item');
                        newsContainer.innerHTML += `<p>${item}</p>`;
                        const imageUrl = data.Quavad[index];
                        if (imageUrl) {
                            fetch(`http://127.0.0.1:5000/api/image?url=${encodeURIComponent(imageUrl)}`)
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.blob();
                                })
                                .then(blob => {
                                    const image = document.createElement('img');

                                    image.src = URL.createObjectURL(blob);
                                    image.alt = "News Image";
                                    newsContainer.appendChild(image);
                                })
                                .catch(error => {
                                    console.error('Error fetching image:', error);
                                    const defaultImage = document.createElement('img');
                                    defaultImage.src = 'bg.jpeg';
                                    defaultImage.alt = "Default Image";
                                    newsContainer.appendChild(defaultImage);
                                });
                        } else {
                            newsContainer.innerHTML += `<p>No image available</p>`;
                        }
                        document.getElementById('news-container').appendChild(newsContainer);
                    });
                })
                .catch(error => console.error('Error fetching news:', error));
                fetch('./Json files/S&P500_data.json')
                .then(response => response.json())
                .then(data => {
                    createCandlestickChart(data);
                })
                .catch(error => {
                console.error('Error fetching data:', error);
                });
                
        });

        for (let i = 0; i < 4; i++) {
            const percElement = document.getElementById(`perc${i}`);
            const percValue = percElement.textContent;
            const div = document.getElementById(`div${i}`);
            const arrow = document.getElementById(`img${i}`);

            // Check if the perc value is negative
            if (percValue.includes('-')) {
                div.style.color = 'red';
                arrow.src = 'redarrow.svg'
            }
        }

        document.getElementById("candlestick-btn").addEventListener("click", function() {
            fetch('./Json files/S&P500_data.json')
                .then(response => response.json())
                .then(data => {
                    createCandlestickChart(data);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        });

        document.getElementById("line-btn").addEventListener("click", function() {
            fetch('./Json files/S&P500_Close_data.json')
                .then(response => response.json())
                .then(data => {
                    createLineChart(data);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        });

        function createCandlestickChart(data) {
            const container = document.getElementById('container');
            container.innerHTML = ''; // Clear previous chart if any

            const chart = LightweightCharts.createChart(
                container,
                {
                    layout: {
                        background: { color: "black" },
                        textColor: "#DDD",
                    },
                    grid: {
                        vertLines: { color: "black" },
                        horzLines: { color: "black" },
                    },
                }
            );

            const mainSeries = chart.addCandlestickSeries();
            mainSeries.setData(data);

            mainSeries.applyOptions({
                wickUpColor: "rgb(54, 116, 217)",
                upColor: "rgb(54, 116, 217)",
                wickDownColor: "rgb(225, 50, 85)",
                downColor: "rgb(225, 50, 85)",
                borderVisible: false,
            });

            window.addEventListener("resize", () => {
                const containerWidth = container.offsetWidth;
                const containerHeight = container.offsetHeight;
                chart.resize(containerWidth, containerHeight);
            });
        }

        function createLineChart(data) {
            const container = document.getElementById('container');
            container.innerHTML = ''; // Clear previous chart if any

            const chart = LightweightCharts.createChart(
                container,
                {
                    layout: {
                        background: { color: "black" },
                        textColor: "#DDD",
                    },
                    grid: {
                        vertLines: { color: "black" },
                        horzLines: { color: "black" },
                    },
                }
            );

            const lineSeries = chart.addLineSeries({
                color: "rgba(255, 105, 180, 1)",
                lineWidth: 2,
            });

            const lineChartData = data.map(item => ({
                time: item.time,
                value: item.value,
            }));

            lineSeries.setData(lineChartData);

            window.addEventListener("resize", () => {
                const containerWidth = container.offsetWidth;
                const containerHeight = container.offsetHeight;
                chart.resize(containerWidth, containerHeight);
            });
        }

    </script>
    
</body>

</html>
